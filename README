Due date: Sunday 9/28/2014 @11:59pm

Objective: Learn how to work with memory and how to implement state machines

Assignment: 

Improve your c16 implementation by:

    - removing the embedded program hack and using actual memory
    - add memory instructions (ld, st)
    - have a multi-cycle implementation

The processor can be in one of 6 states:

    (I) The initial state. Initializes the PC to 0.
    (F) The fetch state. Fetches the next instruction from memory.
    (D) The decode state. Parses the instruction and gets register and
        immediate operands
    (X) Perform any arithmetic or logic operations
    (M) Perform any memory operations
    (W) Updates the register file and computes the next PC
    

Your memory should be:

    - word (16 bit) addressable
    - registered
    - 1024K words
    - initialized from a file called memory.mif


- We need to single-step through programs, Let's use KEY0 as a clock.

- You only need to implement and test the following instruction:

    - add (f=0, f=1)
    - slt (f=0; f=1)
    - lea (f=0, f=1)
    - call (f=0, f=1)
    - brz (f=0, f=1)
    - ld (f=0, f=1)
    - st (f=0, f=1)

- Please continue to develop and share unit tests

- the hex display depends on the position of the SW[4:0]

    - 0xxx   => show register xxx
    - 1000   => show the current instruction

- LDER[9:0] display the 10 least significant bits of the PC

- LEDG[0] I-state
- LEDG[1] F-state
- LEDG[2] D-state
- LEDG[3] X-state
- LEDG[4] M-state
- LEDG[5] W-state

