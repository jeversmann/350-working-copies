
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module screen(

  //////////// CLOCK //////////
  input                   CLOCK_125_p,
  input                   CLOCK_50_B5B,
  input                   CLOCK_50_B6A,
  input                   CLOCK_50_B7A,
  input                   CLOCK_50_B8A,

  //////////// LED //////////
  output         [7:0]    LEDG,
  output         [9:0]    LEDR,

  //////////// KEY //////////
  input                   CPU_RESET_n,
  input          [3:0]    KEY,

  //////////// SW //////////
  input          [9:0]    SW,

  //////////// SEG7 //////////
  output         [6:0]    HEX0,
  output         [6:0]    HEX1,
  output         [6:0]    HEX2,
  output         [6:0]    HEX3,

  //////////// HDMI-TX //////////
  output                  HDMI_TX_CLK,
  output        [23:0]    HDMI_TX_D,
  output                  HDMI_TX_DE,
  output                  HDMI_TX_HS,
  input                   HDMI_TX_INT,
  output                  HDMI_TX_VS,

  //////////// I2C for Audio/HDMI-TX/Si5338/HSMC //////////
  output                  I2C_SCL,
  inout                   I2C_SDA
);



//=======================================================
//  REG/WIRE declarations
//=======================================================


wire[11:0] x;
wire[11:0] y;

reg clk25 = 0;
wire resetn;

reg[9:0] count = 0;

//=======================================================
//  Structural coding
//=======================================================

wire[7:0] r;
wire[7:0] g;
wire[7:0] b;
ascii(clk25, mem_addr, 16'h30,
  x, y, r, g, b );

hdmi(
    clk25, KEY[0],
    x, y,
    r, g, b,

    //////////// HDMI-TX //////////
    HDMI_TX_CLK,
    HDMI_TX_D,
    HDMI_TX_DE,
    HDMI_TX_HS,
    HDMI_TX_INT,
    HDMI_TX_VS
);


// Divide the 50mhz clock in half
always @(posedge CLOCK_50_B5B) begin
  if(SW[0]) begin
    clk25 <= !clk25;
    count <= count + 1;
  end
end

assign LEDR = count;
assign LEDG = g;

display(x[7:4], HEX3);
display(x[3:0], HEX2);
display(y[7:4], HEX1);
display(y[3:0], HEX0);

endmodule

module ascii(clk, mem_addr, mem_value,
  x, y, r, g, b );

output reg[15:0] mem_addr;
output[7:0] r;
output[7:0] g;
output[7:0] b;

input clk;
input[15:0] mem_value;
input[11:0] x;
input[11:0] y;

wire [8:0] row = y[11:3];
wire [8:0] col = x[11:3];
wire [3:0] x_off = x[2:0];
wire [3:0] y_off = y[2:0];

reg [39:0] ascii_mask;
reg [23:0] foreground;
reg [23:0] background;
reg set;

always @(*) begin
  //mem_addr = row * 80 + col;
  if (x_off == 0 || x_off > 5) begin
    set = 0;
  end else begin
    set = ascii_mask[39 - (y_off * 5 + (x_off-1))];
  end
end

assign r = set ? background[23:16] : foreground[23:16];
assign g = set ? background[15:8]  : foreground[15:8];
assign b = set ? background[7:0]   : foreground[7:0];

always @(*) begin
  // Select foreground color based on the top 4 bits
  case (mem_value[11:8])
    4'd0:  foreground = 24'hFFFFFF;
    4'd1:  foreground = 24'h000080;
    4'd2:  foreground = 24'h008000;
    4'd3:  foreground = 24'h008080;
    4'd4:  foreground = 24'h800000;
    4'd5:  foreground = 24'h800080;
    4'd6:  foreground = 24'h808000;
    4'd7:  foreground = 24'hC0C0C0;
    4'd8:  foreground = 24'h808080;
    4'd9:  foreground = 24'h0000FF;
    4'd10: foreground = 24'h00FF00;
    4'd11: foreground = 24'h00FFFF;
    4'd12: foreground = 24'hFF0000;
    4'd13: foreground = 24'hFF00FF;
    4'd14: foreground = 24'hFFFF00;
    4'd15: foreground = 24'h000000;
  endcase

  // Select background color based on the next 4 bits
  case (mem_value[15:12])
    4'd0:  background = 24'h000000;
    4'd1:  background = 24'h000080;
    4'd2:  background = 24'h008000;
    4'd3:  background = 24'h008080;
    4'd4:  background = 24'h800000;
    4'd5:  background = 24'h800080;
    4'd6:  background = 24'h808000;
    4'd7:  background = 24'hC0C0C0;
    4'd8:  background = 24'h808080;
    4'd9:  background = 24'h0000FF;
    4'd10: background = 24'h00FF00;
    4'd11: background = 24'h00FFFF;
    4'd12: background = 24'hFF0000;
    4'd13: background = 24'hFF00FF;
    4'd14: background = 24'hFFFF00;
    4'd15: background = 24'hFFFFFF;
  endcase

  // Select an ascii_mask based on the bottom 8 bits
  case (mem_value[7:0] + ((row+col)%10))
    8'h20: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111
            };
    8'h21: ascii_mask = {
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11111111,
            8'b11100111,
            8'b11111111
            };
    8'h22: ascii_mask = {
            8'b10010011,
            8'b10010011,
            8'b10010011,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111
            };
    8'h23: ascii_mask = {
            8'b10010011,
            8'b10010011,
            8'b00000001,
            8'b10010011,
            8'b00000001,
            8'b10010011,
            8'b10010011,
            8'b11111111
            };
    8'h24: ascii_mask = {
            8'b11100111,
            8'b11000001,
            8'b10100111,
            8'b11000011,
            8'b11100101,
            8'b10000011,
            8'b11100111,
            8'b11111111
            };
    8'h25: ascii_mask = {
            8'b11111111,
            8'b00111001,
            8'b00110011,
            8'b11100111,
            8'b11001111,
            8'b10011001,
            8'b00111001,
            8'b11111111
            };
    8'h26: ascii_mask = {
            8'b11000111,
            8'b10010011,
            8'b11000111,
            8'b10001001,
            8'b00100011,
            8'b00110011,
            8'b10001001,
            8'b11111111
            };
    8'h27: ascii_mask = {
            8'b11100111,
            8'b11100111,
            8'b11001111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111
            };
    8'h28: ascii_mask = {
            8'b11110011,
            8'b11100111,
            8'b11001111,
            8'b11001111,
            8'b11001111,
            8'b11100111,
            8'b11110011,
            8'b11111111
            };
    8'h29: ascii_mask = {
            8'b11001111,
            8'b11100111,
            8'b11110011,
            8'b11110011,
            8'b11110011,
            8'b11100111,
            8'b11001111,
            8'b11111111
            };
    8'h2a: ascii_mask = {
            8'b11111111,
            8'b10011001,
            8'b11000011,
            8'b00000000,
            8'b11000011,
            8'b10011001,
            8'b11111111,
            8'b11111111
            };
    8'h2b: ascii_mask = {
            8'b11111111,
            8'b11100111,
            8'b11100111,
            8'b10000001,
            8'b11100111,
            8'b11100111,
            8'b11111111,
            8'b11111111
            };
    8'h2c: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11100111,
            8'b11100111,
            8'b11001111
            };
    8'h2d: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b10000001,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111
            };
    8'h2e: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11100111,
            8'b11100111,
            8'b11111111
            };
    8'h2f: ascii_mask = {
            8'b11111001,
            8'b11110011,
            8'b11100111,
            8'b11001111,
            8'b10011111,
            8'b00111111,
            8'b01111111,
            8'b11111111
            };
    8'h30: ascii_mask = {
            8'b10000011,
            8'b00111001,
            8'b00110001,
            8'b00101001,
            8'b00011001,
            8'b00111001,
            8'b10000011,
            8'b11111111
            };
    8'h31: ascii_mask = {
            8'b11100111,
            8'b11000111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b10000001,
            8'b11111111
            };
    8'h32: ascii_mask = {
            8'b11000011,
            8'b10011001,
            8'b11111001,
            8'b11000011,
            8'b10011111,
            8'b10011001,
            8'b10000001,
            8'b11111111
            };
    8'h33: ascii_mask = {
            8'b11000011,
            8'b10011001,
            8'b11111001,
            8'b11100011,
            8'b11111001,
            8'b10011001,
            8'b11000011,
            8'b11111111
            };
    8'h34: ascii_mask = {
            8'b11100011,
            8'b11000011,
            8'b10010011,
            8'b00110011,
            8'b00000001,
            8'b11110011,
            8'b11100001,
            8'b11111111
            };
    8'h35: ascii_mask = {
            8'b10000001,
            8'b10011101,
            8'b10011111,
            8'b10000011,
            8'b11111001,
            8'b10011001,
            8'b11000011,
            8'b11111111
            };
    8'h36: ascii_mask = {
            8'b11000011,
            8'b10011001,
            8'b10011111,
            8'b10000011,
            8'b10011001,
            8'b10011001,
            8'b11000011,
            8'b11111111
            };
    8'h37: ascii_mask = {
            8'b10000001,
            8'b10011001,
            8'b11111001,
            8'b11110011,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11111111
            };
    8'h38: ascii_mask = {
            8'b11000011,
            8'b10011001,
            8'b10011001,
            8'b11000011,
            8'b10011001,
            8'b10011001,
            8'b11000011,
            8'b11111111
            };
    8'h39: ascii_mask = {
            8'b11000011,
            8'b10011001,
            8'b10011001,
            8'b11000001,
            8'b11111001,
            8'b10011001,
            8'b11000011,
            8'b11111111
            };
    8'h3a: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11100111,
            8'b11100111,
            8'b11111111,
            8'b11100111,
            8'b11100111,
            8'b11111111
            };
    8'h3b: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11100111,
            8'b11100111,
            8'b11111111,
            8'b11100111,
            8'b11100111,
            8'b11001111
            };
    8'h3c: ascii_mask = {
            8'b11110011,
            8'b11100111,
            8'b11001111,
            8'b10011111,
            8'b11001111,
            8'b11100111,
            8'b11110011,
            8'b11111111
            };
    8'h3d: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b10000001,
            8'b11111111,
            8'b11111111,
            8'b10000001,
            8'b11111111,
            8'b11111111
            };
    8'h3e: ascii_mask = {
            8'b10011111,
            8'b11001111,
            8'b11100111,
            8'b11110011,
            8'b11100111,
            8'b11001111,
            8'b10011111,
            8'b11111111
            };
    8'h3f: ascii_mask = {
            8'b11000011,
            8'b10011001,
            8'b10011001,
            8'b11110011,
            8'b11100111,
            8'b11111111,
            8'b11100111,
            8'b11111111
            };
    8'h40: ascii_mask = {
            8'b10000011,
            8'b00111001,
            8'b00100001,
            8'b00100001,
            8'b00100001,
            8'b00111111,
            8'b10000011,
            8'b11111111
            };
    8'h41: ascii_mask = {
            8'b11100111,
            8'b11000011,
            8'b10011001,
            8'b10011001,
            8'b10000001,
            8'b10011001,
            8'b10011001,
            8'b11111111
            };
    8'h42: ascii_mask = {
            8'b00000011,
            8'b10011001,
            8'b10011001,
            8'b10000011,
            8'b10011001,
            8'b10011001,
            8'b00000011,
            8'b11111111
            };
    8'h43: ascii_mask = {
            8'b11000011,
            8'b10011001,
            8'b00111111,
            8'b00111111,
            8'b00111111,
            8'b10011001,
            8'b11000011,
            8'b11111111
            };
    8'h44: ascii_mask = {
            8'b00000111,
            8'b10010011,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b10010011,
            8'b00000111,
            8'b11111111
            };
    8'h45: ascii_mask = {
            8'b00000001,
            8'b10011101,
            8'b10010111,
            8'b10000111,
            8'b10010111,
            8'b10011101,
            8'b00000001,
            8'b11111111
            };
    8'h46: ascii_mask = {
            8'b00000001,
            8'b10011101,
            8'b10010111,
            8'b10000111,
            8'b10010111,
            8'b10011111,
            8'b00001111,
            8'b11111111
            };
    8'h47: ascii_mask = {
            8'b11000011,
            8'b10011001,
            8'b00111111,
            8'b00111111,
            8'b00110001,
            8'b10011001,
            8'b11000001,
            8'b11111111
            };
    8'h48: ascii_mask = {
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b10000001,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b11111111
            };
    8'h49: ascii_mask = {
            8'b10000001,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b10000001,
            8'b11111111
            };
    8'h4a: ascii_mask = {
            8'b11100001,
            8'b11110011,
            8'b11110011,
            8'b11110011,
            8'b00110011,
            8'b00110011,
            8'b10000111,
            8'b11111111
            };
    8'h4b: ascii_mask = {
            8'b00011001,
            8'b10011001,
            8'b10010011,
            8'b10000111,
            8'b10010011,
            8'b10011001,
            8'b00011001,
            8'b11111111
            };
    8'h4c: ascii_mask = {
            8'b00001111,
            8'b10011111,
            8'b10011111,
            8'b10011111,
            8'b10011101,
            8'b10011001,
            8'b00000001,
            8'b11111111
            };
    8'h4d: ascii_mask = {
            8'b00111001,
            8'b00010001,
            8'b00000001,
            8'b00000001,
            8'b00101001,
            8'b00111001,
            8'b00111001,
            8'b11111111
            };
    8'h4e: ascii_mask = {
            8'b00111001,
            8'b00011001,
            8'b00001001,
            8'b00100001,
            8'b00110001,
            8'b00111001,
            8'b00111001,
            8'b11111111
            };
    8'h4f: ascii_mask = {
            8'b11000111,
            8'b10010011,
            8'b00111001,
            8'b00111001,
            8'b00111001,
            8'b10010011,
            8'b11000111,
            8'b11111111
            };
    8'h50: ascii_mask = {
            8'b00000011,
            8'b10011001,
            8'b10011001,
            8'b10000011,
            8'b10011111,
            8'b10011111,
            8'b00001111,
            8'b11111111
            };
    8'h51: ascii_mask = {
            8'b11000111,
            8'b10010011,
            8'b00111001,
            8'b00111001,
            8'b00100101,
            8'b00110011,
            8'b10001001,
            8'b11111111
            };
    8'h52: ascii_mask = {
            8'b00000011,
            8'b10011001,
            8'b10011001,
            8'b10000011,
            8'b10010011,
            8'b10011001,
            8'b00011001,
            8'b11111111
            };
    8'h53: ascii_mask = {
            8'b11000011,
            8'b10011001,
            8'b10011111,
            8'b11000011,
            8'b11111001,
            8'b10011001,
            8'b11000011,
            8'b11111111
            };
    8'h54: ascii_mask = {
            8'b10000001,
            8'b10100101,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11000011,
            8'b11111111
            };
    8'h55: ascii_mask = {
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b11000011,
            8'b11111111
            };
    8'h56: ascii_mask = {
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b11000011,
            8'b11100111,
            8'b11111111
            };
    8'h57: ascii_mask = {
            8'b00111001,
            8'b00111001,
            8'b00111001,
            8'b00101001,
            8'b00000001,
            8'b00010001,
            8'b00111001,
            8'b11111111
            };
    8'h58: ascii_mask = {
            8'b00111001,
            8'b10010011,
            8'b11000111,
            8'b11000111,
            8'b10010011,
            8'b00111001,
            8'b00111001,
            8'b11111111
            };
    8'h59: ascii_mask = {
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b11000011,
            8'b11100111,
            8'b11100111,
            8'b11000011,
            8'b11111111
            };
    8'h5a: ascii_mask = {
            8'b00000001,
            8'b00111001,
            8'b01110011,
            8'b11100111,
            8'b11001101,
            8'b10011001,
            8'b00000001,
            8'b11111111
            };
    8'h5b: ascii_mask = {
            8'b11000011,
            8'b11001111,
            8'b11001111,
            8'b11001111,
            8'b11001111,
            8'b11001111,
            8'b11000011,
            8'b11111111
            };
    8'h5c: ascii_mask = {
            8'b00111111,
            8'b10011111,
            8'b11001111,
            8'b11100111,
            8'b11110011,
            8'b11111001,
            8'b11111101,
            8'b11111111
            };
    8'h5d: ascii_mask = {
            8'b11000011,
            8'b11110011,
            8'b11110011,
            8'b11110011,
            8'b11110011,
            8'b11110011,
            8'b11000011,
            8'b11111111
            };
    8'h5e: ascii_mask = {
            8'b11100111,
            8'b11000011,
            8'b10000001,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11111111
            };
    8'h5f: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b00000000
            };
    8'h60: ascii_mask = {
            8'b11001111,
            8'b11100111,
            8'b11110011,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111
            };
    8'h61: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b10000111,
            8'b11110011,
            8'b10000011,
            8'b00110011,
            8'b10001001,
            8'b11111111
            };
    8'h62: ascii_mask = {
            8'b00011111,
            8'b10011111,
            8'b10000011,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b00100011,
            8'b11111111
            };
    8'h63: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11000011,
            8'b10011001,
            8'b10011111,
            8'b10011001,
            8'b11000011,
            8'b11111111
            };
    8'h64: ascii_mask = {
            8'b11100011,
            8'b11110011,
            8'b10000011,
            8'b00110011,
            8'b00110011,
            8'b00110011,
            8'b10001001,
            8'b11111111
            };
    8'h65: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11000011,
            8'b10011001,
            8'b10000001,
            8'b10011111,
            8'b11000011,
            8'b11111111
            };
    8'h66: ascii_mask = {
            8'b11100011,
            8'b11001001,
            8'b11001111,
            8'b10000111,
            8'b11001111,
            8'b11001111,
            8'b10000111,
            8'b11111111
            };
    8'h67: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11000001,
            8'b10011001,
            8'b10011001,
            8'b11000001,
            8'b11111001,
            8'b10000011
            };
    8'h68: ascii_mask = {
            8'b00011111,
            8'b10011111,
            8'b10010011,
            8'b10001001,
            8'b10011001,
            8'b10011001,
            8'b00011001,
            8'b11111111
            };
    8'h69: ascii_mask = {
            8'b11100111,
            8'b11111111,
            8'b11000111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11000011,
            8'b11111111
            };
    8'h6a: ascii_mask = {
            8'b11111001,
            8'b11111111,
            8'b11110001,
            8'b11111001,
            8'b11111001,
            8'b10011001,
            8'b10011001,
            8'b11000011
            };
    8'h6b: ascii_mask = {
            8'b00011111,
            8'b10011111,
            8'b10011001,
            8'b10010011,
            8'b10000111,
            8'b10010011,
            8'b00011001,
            8'b11111111
            };
    8'h6c: ascii_mask = {
            8'b11000111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11000011,
            8'b11111111
            };
    8'h6d: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b10010011,
            8'b00000001,
            8'b00101001,
            8'b00101001,
            8'b00111001,
            8'b11111111
            };
    8'h6e: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b00100011,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b11111111
            };
    8'h6f: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11000011,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b11000011,
            8'b11111111
            };
    8'h70: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b00100011,
            8'b10011001,
            8'b10011001,
            8'b10000011,
            8'b10011111,
            8'b00001111
            };
    8'h71: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b10001001,
            8'b00110011,
            8'b00110011,
            8'b10000011,
            8'b11110011,
            8'b11100001
            };
    8'h72: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b00100011,
            8'b10001001,
            8'b10011111,
            8'b10011111,
            8'b00001111,
            8'b11111111
            };
    8'h73: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11000011,
            8'b10011111,
            8'b11000011,
            8'b11111001,
            8'b10000011,
            8'b11111111
            };
    8'h74: ascii_mask = {
            8'b11001111,
            8'b11001111,
            8'b10000011,
            8'b11001111,
            8'b11001111,
            8'b11001001,
            8'b11100011,
            8'b11111111
            };
    8'h75: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b11000001,
            8'b11111111
            };
    8'h76: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b11000011,
            8'b11100111,
            8'b11111111
            };
    8'h77: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b00111001,
            8'b00101001,
            8'b00101001,
            8'b00000001,
            8'b10010011,
            8'b11111111
            };
    8'h78: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b00111001,
            8'b10010011,
            8'b11000111,
            8'b10010011,
            8'b00111001,
            8'b11111111
            };
    8'h79: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b11000001,
            8'b11111001,
            8'b10000011
            };
    8'h7a: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b10000001,
            8'b10110011,
            8'b11100111,
            8'b11001101,
            8'b10000001,
            8'b11111111
            };
    8'h7b: ascii_mask = {
            8'b11110001,
            8'b11100111,
            8'b11100111,
            8'b10001111,
            8'b11100111,
            8'b11100111,
            8'b11110001,
            8'b11111111
            };
    8'h7c: ascii_mask = {
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11111111
            };
    8'h7d: ascii_mask = {
            8'b10001111,
            8'b11100111,
            8'b11100111,
            8'b11110001,
            8'b11100111,
            8'b11100111,
            8'b10001111,
            8'b11111111
            };
    8'h7e: ascii_mask = {
            8'b10001001,
            8'b00100011,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111
            };
    8'h7f: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111
            };
    endcase
  end
endmodule

/////////////////////////
// 7 SEG               //
/////////////////////////
module display(NUM, HEX);
  input[3:0] NUM;

  output[6:0] HEX;
  reg[6:0] HEX;

  always @(*)
  case (NUM)
    4'h0 : HEX = 7'b1000000;
    4'h1 : HEX = 7'b1111001;
    4'h2 : HEX = 7'b0100100;
    4'h3 : HEX = 7'b0110000;
    4'h4 : HEX = 7'b0011001;
    4'h5 : HEX = 7'b0010010;
    4'h6 : HEX = 7'b0000010;
    4'h7 : HEX = 7'b1111000;
    4'h8 : HEX = 7'b0000000;
    4'h9 : HEX = 7'b0010000;
    4'hA : HEX = 7'b0001000;
    4'hB : HEX = 7'b0000011;
    4'hC : HEX = 7'b0100111;
    4'hD : HEX = 7'b0100001;
    4'hE : HEX = 7'b0000110;
    4'hF : HEX = 7'b0001110;
  endcase
endmodule

////////////////////////////
// HDMI MODULE FROM CHRIS //
////////////////////////////
module hdmi(
    clock25, resetn,
    x, y,
    r, g, b,

    //////////// HDMI-TX //////////
    HDMI_TX_CLK,
    HDMI_TX_D,
    HDMI_TX_DE,
    HDMI_TX_HS,
    HDMI_TX_INT,
    HDMI_TX_VS
);

parameter WIDTH = 640;
parameter HEIGHT = 480;
parameter XDIV = 1;
parameter YDIV = 1;
parameter XSTART = 0;
parameter XEND = XSTART + XDIV*WIDTH;
parameter YSTART = 0;
parameter YEND = YSTART + YDIV*HEIGHT;

parameter HSIZE = 640;
parameter VSIZE = 480;
parameter HTOTAL = 800;
parameter VTOTAL = 525;
parameter HSTART = 141;
parameter HEND = HSTART + HSIZE;
parameter VSTART = 34;
parameter VEND = VSTART + VSIZE;

input clock25;
input resetn;
output reg [11:0] x;
output reg [11:0] y;
input [7:0] r;
input [7:0] g;
input [7:0] b;

output HDMI_TX_CLK = clock25;
output [23:0] HDMI_TX_D = hdmi_data;
output HDMI_TX_DE = hdmi_de[1];
output HDMI_TX_HS = hdmi_hsync;
output HDMI_TX_VS = hdmi_vsync;
input HDMI_TX_INT;

initial begin
      hdmi_de <= 0;
        hdmi_hcount <= 0;
        hdmi_vcount <= 0;
      hdmi_data <= 0;
        xcount <= 0;
        x <= 0;
        ycount <= 0;
        y <= 0;
end

reg [23:0] hdmi_data;
reg [1:0] hdmi_de;

reg [11:0] hdmi_hcount;
reg [11:0] hdmi_vcount;
wire hdmi_hactive = hdmi_hcount >= HSTART && hdmi_hcount < HEND;
wire hdmi_vactive = hdmi_vcount >= VSTART && hdmi_vcount < VEND;
wire hdmi_active = hdmi_hactive && hdmi_vactive;
wire hdmi_hsync = hdmi_hcount >= HEND;
wire hdmi_vsync = hdmi_vcount >= VEND;

always @(posedge clock25 or negedge resetn) begin
    if (!resetn) begin
        hdmi_de <= 0;
        hdmi_hcount <= 0;
        hdmi_vcount <= 0;
    end else begin
        hdmi_de[1] <= hdmi_de[0];
        hdmi_de[0] <= hdmi_active;

        if (hdmi_hcount + 1'b1 == HTOTAL) begin
            hdmi_hcount <= 0;

            if (hdmi_vcount + 1'b1 == VTOTAL) begin
                hdmi_vcount <= 0;
            end else begin
                hdmi_vcount <= hdmi_vcount + 1'b1;
            end
        end else begin
            hdmi_hcount <= hdmi_hcount + 1'b1;
        end
    end
end


wire xactive = hdmi_hcount >= HSTART+XSTART && hdmi_hcount < HSTART+XEND;
wire yactive = hdmi_vcount >= VSTART+YSTART && hdmi_vcount < VSTART+YEND;

reg [$clog2(XDIV)-1:0] xcount;
reg [$clog2(YDIV)-1:0] ycount;

always @(posedge clock25 or negedge resetn) begin
    if (!resetn) begin
        hdmi_data <= 0;
        xcount <= 0;
        x <= 0;
        ycount <= 0;
        y <= 0;
    end else begin
        if (xactive && yactive) begin
            hdmi_data <= {r, g, b};

            if (xcount + 1'b1 == XDIV) begin
                xcount <= 0;
                if (x + 1'b1 == WIDTH) begin
                    x <= 0;
                    if (ycount + 1'b1 == YDIV) begin
                        ycount <= 0;
                        if (y + 1'b1 == HEIGHT) begin
                            y <= 0;
                        end else begin
                            y <= y + 1'b1;
                        end
                    end else begin
                        ycount <= ycount + 1'b1;
                    end
                end else begin
                    x <= x + 1'b1;
                end
            end else begin
                xcount <= xcount + 1'b1;
            end
        end else begin
            hdmi_data <= 0;
        end
    end
end

endmodule
