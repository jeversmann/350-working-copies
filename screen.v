
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module screen(

  //////////// CLOCK //////////
  input                   CLOCK_125_p,
  input                   CLOCK_50_B5B,
  input                   CLOCK_50_B6A,
  input                   CLOCK_50_B7A,
  input                   CLOCK_50_B8A,

  //////////// LED //////////
  output         [7:0]    LEDG,
  output         [9:0]    LEDR,

  //////////// KEY //////////
  input                   CPU_RESET_n,
  input          [3:0]    KEY,

  //////////// SW //////////
  input          [9:0]    SW,

  //////////// SEG7 //////////
  output         [6:0]    HEX0,
  output         [6:0]    HEX1,
  output         [6:0]    HEX2,
  output         [6:0]    HEX3,

  //////////// HDMI-TX //////////
  output                  HDMI_TX_CLK,
  output        [23:0]    HDMI_TX_D,
  output                  HDMI_TX_DE,
  output                  HDMI_TX_HS,
  input                   HDMI_TX_INT,
  output                  HDMI_TX_VS,

  //////////// I2C for Audio/HDMI-TX/Si5338/HSMC //////////
  output                  I2C_SCL,
  inout                   I2C_SDA
);

//=======================================================
//  PARAMETER declarations
//=======================================================
// Not sure if these should be 4'
parameter I = 3'h0;
parameter F = 3'h1;
parameter F1 = 3'h6;
parameter F2 = 3'h7;
parameter D = 3'h2;
parameter X = 3'h3;
parameter M = 3'h4;
parameter W = 3'h5;
// Execute ops
parameter ADD = 4'h0;
parameter SUB = 4'h1;
parameter MUL = 4'h2;
parameter SET = 4'h3;
parameter NOP = 4'h4;
parameter SHFT = 4'h5;
parameter CMP = 4'h6;
// Memory ops
parameter MEM_LD = 4'h0;
parameter MEM_ST = 4'h1;
// NOP from above reused
// Write Back OPS
parameter WB_REG = 4'h0;
parameter WB_PC = 4'h1;
// NOP from above reused

/////////////////////////
// The processor state //
/////////////////////////

reg [15:0]regs[7:0];     // register
reg [15:0]pc;             // the pc
reg [2:0]cur_state = I;
reg [2:0]next_state = F;


reg clk25 = 0;
wire clk = clk25;

initial begin
        pc = 0;
        regs[0] = 0;
        regs[1] = 0;
        regs[2] = 0;
        regs[3] = 0;
        regs[4] = 0;
        regs[5] = 0;
        regs[6] = 0;
        regs[7] = 0;
end

///////////
// fetch //
///////////

reg mem_wren;
reg next_mem_wren;
wire [15:0]mem_out;
ram ((next_state == F) ? pc : next_xv_out, clk, vd, mem_wren, mem_out);

///////////////////
// decode & regs //
///////////////////

// Fields in the instruction
reg [15:0]inst;           // the instruction
reg [3:0]x_op;
reg [3:0]m_op;
reg [3:0]wb_op;
reg [3:0]next_x_op;
reg [3:0]next_m_op;
reg [3:0]next_wb_op;
wire [4:0] opcode = mem_out[15:11];
wire [2:0] rd = mem_out[10:8];
wire [2:0] ra = mem_out[7:5];
wire [2:0] rb = mem_out[2:0];
// Immediate values, sign extended using our custom module
wire [15:0]imm5 = $signed(mem_out[4:0]);
wire [15:0]imm8 = $signed(mem_out[7:0]);
// Values loaded from registers
wire [15:0] va = regs[ra];
wire [15:0] vb = regs[rb];
wire [15:0] vd = regs[rd];
// Values for execute stage
reg [15:0]next_xv_0;
reg [15:0]next_xv_1;
reg [15:0]next_xv_out;
reg [15:0]xv_0;
reg [15:0]xv_1;
reg [15:0]xv_out;
reg [2:0] next_rd;

/////////////
// execute //
/////////////

reg [15:0] nextpc;        // the next pc
reg [15:0] rfdata;         // the register value

always @(*) begin
    next_xv_out = 16'hface; // This shouldn't be read
    case (cur_state)
        I: begin
        end
        F: begin
        end
        D: begin
            case (opcode)
            // Add, f = 0
            5'b00000: begin
                next_x_op = ADD;
                next_m_op = NOP;
                next_xv_0 = va;
                next_xv_1 = imm5;
                next_wb_op = WB_REG;
            end

            // Add, f = 1
            5'b00001: begin
                next_x_op = ADD;
                next_m_op = NOP;
                next_xv_0 = va;
                next_xv_1 = vb;
                next_wb_op = WB_REG;
            end

            // Slt, f = 0
            5'b00100: begin
                next_x_op = SET;
                next_m_op = NOP;
                next_xv_0 = va;
                next_xv_1 = imm5;
                next_wb_op = WB_REG;
            end

            // Slt, f = 1
            5'b00101: begin
                next_x_op = SET;
                next_m_op = NOP;
                next_xv_0 = va;
                next_xv_1 = vb;
                next_wb_op = WB_REG;
            end

            // Lea, f = 0
            5'b11000: begin
                next_x_op = ADD;
                next_m_op = NOP;
                next_xv_0 = va;
                next_xv_1 = imm5;
                next_wb_op = WB_REG;
            end

            // Lea, f = 1
            5'b11001: begin
                next_x_op = ADD;
                next_m_op = NOP;
                next_xv_0 = pc;
                next_xv_1 = imm8;
                next_wb_op = WB_REG;
            end

            // Call, f = 0
            5'b11010: begin
                next_x_op = ADD;
                next_m_op = NOP;
                next_xv_0 = va;
                next_xv_1 = imm5;
                next_wb_op = WB_PC;
            end

            // Call, f = 1
            5'b11011: begin
                next_x_op = ADD;
                next_m_op = NOP;
                next_xv_0 = pc;
                next_xv_1 = imm8;
                next_wb_op = WB_PC;
            end

            // brz, f = 0
            5'b11110: begin
                next_x_op = ADD;
                next_m_op = NOP;
                next_xv_0 = va;
                next_xv_1 = imm5;
                if (vd == 0)
                    next_wb_op = WB_PC;
                else
                    next_wb_op = NOP;
            end

            // brz, f = 1
            5'b11111: begin
                next_x_op = ADD;
                next_m_op = NOP;
                next_xv_0 = pc;
                next_xv_1 = imm8;
                if (vd == 0)
                    next_wb_op = WB_PC;
                else
                    next_wb_op = NOP;
            end

            // ld, f = 0
            5'b10100: begin
                next_x_op = ADD;
                next_m_op = MEM_LD;
                next_xv_0 = va;
                next_xv_1 = imm5;
                next_wb_op = WB_REG;
            end

            // ld, f = 1
            5'b10101: begin
                next_x_op = ADD;
                next_m_op = MEM_LD;
                next_xv_0 = pc;
                next_xv_1 = imm8;
                next_wb_op = WB_REG;
            end

            // st, f = 0
            5'b10110: begin
                next_x_op = ADD;
                next_m_op = MEM_ST;
                next_xv_0 = va;
                next_xv_1 = imm5;
                next_wb_op = NOP;
            end

            // st, f = 1
            5'b10111: begin
                next_x_op = ADD;
                next_m_op = MEM_ST;
                next_xv_0 = pc;
                next_xv_1 = imm8;
                next_wb_op = NOP;
            end
         endcase
        end
        X: begin
            case (x_op)
            ADD: begin
                 next_xv_out = xv_0 + xv_1;
            end
            NOP: begin
            end
            SET: begin
                 next_xv_out = xv_0 < xv_1;
            end
            endcase
        end
        W: begin
        end
    endcase
end


///////////////////
// debug support //
///////////////////
reg [15:0]debug;
assign LEDG[0] = cur_state == I;
assign LEDG[1] = cur_state == F;
assign LEDG[2] = cur_state == D;
assign LEDG[3] = cur_state == X;
assign LEDG[4] = cur_state == M;
assign LEDG[5] = cur_state == W;
assign LEDR = pc[9:0];
display(debug[15:12], HEX3);
display(debug[11:8], HEX2);
display(debug[7:4], HEX1);
display(debug[3:0], HEX0);

// what do we display
always @(*) begin
    if (SW[3]) begin
        debug = inst;
    end else if(SW[9]) begin
        debug = xv_out;
    end else if(SW[8]) begin
        debug = next_xv_out;
    end else if(SW[7]) begin
        debug = imm5;
    end else if(SW[6]) begin
        debug = mem_out;
    end else if(SW[5]) begin
        debug[15:12] = rd;
        debug[11:8] = ra;
        debug[7:4] = rb;
    end else begin
        debug = regs[SW[2:0]];
    end
end

/////////////////////////
// The sequential part //
/////////////////////////

always @(posedge clk) begin
    if (!CPU_RESET_n) begin
        next_state <= F;
        cur_state <= I;
        pc = 0;
        regs[0] = 0;
        regs[1] = 0;
        regs[2] = 0;
        regs[3] = 0;
        regs[4] = 0;
        regs[5] = 0;
        regs[6] = 0;
        inst <= 0;
    end else
    case (cur_state)
    I: begin
        cur_state <= F;
        next_state <= D;
    end
    F: begin
        cur_state <= D;
        next_state <= X;
    end
    D: begin
        inst <= mem_out;
        m_op <= next_m_op;
        x_op <= next_x_op;
        xv_0 <= next_xv_0;
        xv_1 <= next_xv_1;
        wb_op <= next_wb_op;
        cur_state <= X;
        next_state <= M;
        next_rd <= rd;
    end
    X: begin
        case (m_op)
        MEM_LD: begin
            mem_wren <= 0;
        end
        MEM_ST: begin
            mem_wren <= 1;
        end
        NOP: begin
            mem_wren <= 0;
        end
        endcase
        xv_out <= next_xv_out;
        cur_state <= M;
        next_state <= W;
    end
    M: begin
        mem_wren <= 0;
        case (m_op)
        MEM_LD: begin
                rfdata <= mem_out;
        end
        NOP: begin
           rfdata <= xv_out;
        end
        endcase
        cur_state <= W;
        next_state <= F;
        case (wb_op)
        WB_REG: begin
            pc <= pc + 1;
        end
        WB_PC: begin
            pc <= rfdata;
        end
        NOP: begin
            pc <= pc + 1;
        end
        endcase
    end
    W: begin
        // If the target is R7, don't write out the value
        case (wb_op)
        WB_REG: begin
            if (next_rd != 7) regs[next_rd] <= rfdata;
            if (m_op == MEM_LD) regs[next_rd] <= mem_out;
        end
        WB_PC: begin
        end
        NOP: begin
        end
        endcase
        cur_state <= F;
        next_state <= D;
    end
    endcase
end
//=======================================================
//  Display stuff
//=======================================================


wire[7:0] r;
wire[7:0] g;
wire[7:0] b;

// Video Memory
wire[15:0] ignore;
wire[15:0] mem_addr;
wire[15:0] mem_value;
ram2 (
	.address_a(mem_addr),
	.address_b(next_xv_out),
	.clock(clk25),
	.data_a(0),
	.data_b(vd),
	.wren_a(0),
	.wren_b(mem_wren),
	.q_a(mem_value),
	.q_b(ignore)
	);

ascii(clk25, mem_addr, mem_value,
  x, y, r, g, b );

hdmi #(2)(
    clk25, KEY[0],
    x, y,
    r, g, b,

    //////////// HDMI-TX //////////
    HDMI_TX_CLK,
    HDMI_TX_D,
    HDMI_TX_DE,
    HDMI_TX_HS,
    HDMI_TX_INT,
    HDMI_TX_VS
);


// Divide the 50mhz clock in half
always @(posedge CLOCK_50_B5B) begin
    clk25 <= !clk25;
end
endmodule

//////////////////////
// ASCII TRANSLATOR //
//////////////////////
module ascii(clk, mem_addr, mem_value,
  x, y, r, g, b );

output reg[15:0] mem_addr;
output[7:0] r;
output[7:0] g;
output[7:0] b;

input clk;
input[15:0] mem_value;
input[11:0] x;
input[11:0] y;

wire [8:0] row = y[11:3];
wire [8:0] col = x[11:3];
reg [3:0] x_off [2:0];
reg [3:0] y_off [2:0];

reg [63:0] ascii_mask;
reg [23:0] foreground;
reg [23:0] background;
reg set;

always @(*) begin
  mem_addr = row * 80 + col;
  set = ascii_mask[64 - (y_off[1] * 8 + x_off[1])];
end

always @(posedge clk) begin
	x_off[2] <= x[2:0];
	x_off[1] <= x_off[2];
	x_off[0] <= x_off[1];
	y_off[2] <= y[2:0];
	y_off[1] <= y_off[2];
	y_off[0] <= y_off[1];
end

assign r = set ? background[23:16] : foreground[23:16];
assign g = set ? background[15:8]  : foreground[15:8];
assign b = set ? background[7:0]   : foreground[7:0];

always @(*) begin
  // Select foreground color based on the top 4 bits
  case (mem_value[11:8])
    4'd0:  foreground = 24'hFFFFFF;
    4'd1:  foreground = 24'h000080;
    4'd2:  foreground = 24'h008000;
    4'd3:  foreground = 24'h008080;
    4'd4:  foreground = 24'h800000;
    4'd5:  foreground = 24'h800080;
    4'd6:  foreground = 24'h808000;
    4'd7:  foreground = 24'hC0C0C0;
    4'd8:  foreground = 24'h808080;
    4'd9:  foreground = 24'h0000FF;
    4'd10: foreground = 24'h00FF00;
    4'd11: foreground = 24'h00FFFF;
    4'd12: foreground = 24'hFF0000;
    4'd13: foreground = 24'hFF00FF;
    4'd14: foreground = 24'hFFFF00;
    4'd15: foreground = 24'h000000;
  endcase

  // Select background color based on the next 4 bits
  case (mem_value[15:12])
    4'd0:  background = 24'h000000;
    4'd1:  background = 24'h000080;
    4'd2:  background = 24'h008000;
    4'd3:  background = 24'h008080;
    4'd4:  background = 24'h800000;
    4'd5:  background = 24'h800080;
    4'd6:  background = 24'h808000;
    4'd7:  background = 24'hC0C0C0;
    4'd8:  background = 24'h808080;
    4'd9:  background = 24'h0000FF;
    4'd10: background = 24'h00FF00;
    4'd11: background = 24'h00FFFF;
    4'd12: background = 24'hFF0000;
    4'd13: background = 24'hFF00FF;
    4'd14: background = 24'hFFFF00;
    4'd15: background = 24'hFFFFFF;
  endcase

  // Select an ascii_mask based on the bottom 8 bits
  case (mem_value[7:0])
    8'h20: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111
            };
    8'h21: ascii_mask = {
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11111111,
            8'b11100111,
            8'b11111111
            };
    8'h22: ascii_mask = {
            8'b10010011,
            8'b10010011,
            8'b10010011,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111
            };
    8'h23: ascii_mask = {
            8'b10010011,
            8'b10010011,
            8'b00000001,
            8'b10010011,
            8'b00000001,
            8'b10010011,
            8'b10010011,
            8'b11111111
            };
    8'h24: ascii_mask = {
            8'b11100111,
            8'b11000001,
            8'b10100111,
            8'b11000011,
            8'b11100101,
            8'b10000011,
            8'b11100111,
            8'b11111111
            };
    8'h25: ascii_mask = {
            8'b11111111,
            8'b00111001,
            8'b00110011,
            8'b11100111,
            8'b11001111,
            8'b10011001,
            8'b00111001,
            8'b11111111
            };
    8'h26: ascii_mask = {
            8'b11000111,
            8'b10010011,
            8'b11000111,
            8'b10001001,
            8'b00100011,
            8'b00110011,
            8'b10001001,
            8'b11111111
            };
    8'h27: ascii_mask = {
            8'b11100111,
            8'b11100111,
            8'b11001111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111
            };
    8'h28: ascii_mask = {
            8'b11110011,
            8'b11100111,
            8'b11001111,
            8'b11001111,
            8'b11001111,
            8'b11100111,
            8'b11110011,
            8'b11111111
            };
    8'h29: ascii_mask = {
            8'b11001111,
            8'b11100111,
            8'b11110011,
            8'b11110011,
            8'b11110011,
            8'b11100111,
            8'b11001111,
            8'b11111111
            };
    8'h2a: ascii_mask = {
            8'b11111111,
            8'b10011001,
            8'b11000011,
            8'b00000000,
            8'b11000011,
            8'b10011001,
            8'b11111111,
            8'b11111111
            };
    8'h2b: ascii_mask = {
            8'b11111111,
            8'b11100111,
            8'b11100111,
            8'b10000001,
            8'b11100111,
            8'b11100111,
            8'b11111111,
            8'b11111111
            };
    8'h2c: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11100111,
            8'b11100111,
            8'b11001111
            };
    8'h2d: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b10000001,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111
            };
    8'h2e: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11100111,
            8'b11100111,
            8'b11111111
            };
    8'h2f: ascii_mask = {
            8'b11111001,
            8'b11110011,
            8'b11100111,
            8'b11001111,
            8'b10011111,
            8'b00111111,
            8'b01111111,
            8'b11111111
            };
    8'h30: ascii_mask = {
            8'b10000011,
            8'b00111001,
            8'b00110001,
            8'b00101001,
            8'b00011001,
            8'b00111001,
            8'b10000011,
            8'b11111111
            };
    8'h31: ascii_mask = {
            8'b11100111,
            8'b11000111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b10000001,
            8'b11111111
            };
    8'h32: ascii_mask = {
            8'b11000011,
            8'b10011001,
            8'b11111001,
            8'b11000011,
            8'b10011111,
            8'b10011001,
            8'b10000001,
            8'b11111111
            };
    8'h33: ascii_mask = {
            8'b11000011,
            8'b10011001,
            8'b11111001,
            8'b11100011,
            8'b11111001,
            8'b10011001,
            8'b11000011,
            8'b11111111
            };
    8'h34: ascii_mask = {
            8'b11100011,
            8'b11000011,
            8'b10010011,
            8'b00110011,
            8'b00000001,
            8'b11110011,
            8'b11100001,
            8'b11111111
            };
    8'h35: ascii_mask = {
            8'b10000001,
            8'b10011101,
            8'b10011111,
            8'b10000011,
            8'b11111001,
            8'b10011001,
            8'b11000011,
            8'b11111111
            };
    8'h36: ascii_mask = {
            8'b11000011,
            8'b10011001,
            8'b10011111,
            8'b10000011,
            8'b10011001,
            8'b10011001,
            8'b11000011,
            8'b11111111
            };
    8'h37: ascii_mask = {
            8'b10000001,
            8'b10011001,
            8'b11111001,
            8'b11110011,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11111111
            };
    8'h38: ascii_mask = {
            8'b11000011,
            8'b10011001,
            8'b10011001,
            8'b11000011,
            8'b10011001,
            8'b10011001,
            8'b11000011,
            8'b11111111
            };
    8'h39: ascii_mask = {
            8'b11000011,
            8'b10011001,
            8'b10011001,
            8'b11000001,
            8'b11111001,
            8'b10011001,
            8'b11000011,
            8'b11111111
            };
    8'h3a: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11100111,
            8'b11100111,
            8'b11111111,
            8'b11100111,
            8'b11100111,
            8'b11111111
            };
    8'h3b: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11100111,
            8'b11100111,
            8'b11111111,
            8'b11100111,
            8'b11100111,
            8'b11001111
            };
    8'h3c: ascii_mask = {
            8'b11110011,
            8'b11100111,
            8'b11001111,
            8'b10011111,
            8'b11001111,
            8'b11100111,
            8'b11110011,
            8'b11111111
            };
    8'h3d: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b10000001,
            8'b11111111,
            8'b11111111,
            8'b10000001,
            8'b11111111,
            8'b11111111
            };
    8'h3e: ascii_mask = {
            8'b10011111,
            8'b11001111,
            8'b11100111,
            8'b11110011,
            8'b11100111,
            8'b11001111,
            8'b10011111,
            8'b11111111
            };
    8'h3f: ascii_mask = {
            8'b11000011,
            8'b10011001,
            8'b10011001,
            8'b11110011,
            8'b11100111,
            8'b11111111,
            8'b11100111,
            8'b11111111
            };
    8'h40: ascii_mask = {
            8'b10000011,
            8'b00111001,
            8'b00100001,
            8'b00100001,
            8'b00100001,
            8'b00111111,
            8'b10000011,
            8'b11111111
            };
    8'h41: ascii_mask = {
            8'b11100111,
            8'b11000011,
            8'b10011001,
            8'b10011001,
            8'b10000001,
            8'b10011001,
            8'b10011001,
            8'b11111111
            };
    8'h42: ascii_mask = {
            8'b00000011,
            8'b10011001,
            8'b10011001,
            8'b10000011,
            8'b10011001,
            8'b10011001,
            8'b00000011,
            8'b11111111
            };
    8'h43: ascii_mask = {
            8'b11000011,
            8'b10011001,
            8'b00111111,
            8'b00111111,
            8'b00111111,
            8'b10011001,
            8'b11000011,
            8'b11111111
            };
    8'h44: ascii_mask = {
            8'b00000111,
            8'b10010011,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b10010011,
            8'b00000111,
            8'b11111111
            };
    8'h45: ascii_mask = {
            8'b00000001,
            8'b10011101,
            8'b10010111,
            8'b10000111,
            8'b10010111,
            8'b10011101,
            8'b00000001,
            8'b11111111
            };
    8'h46: ascii_mask = {
            8'b00000001,
            8'b10011101,
            8'b10010111,
            8'b10000111,
            8'b10010111,
            8'b10011111,
            8'b00001111,
            8'b11111111
            };
    8'h47: ascii_mask = {
            8'b11000011,
            8'b10011001,
            8'b00111111,
            8'b00111111,
            8'b00110001,
            8'b10011001,
            8'b11000001,
            8'b11111111
            };
    8'h48: ascii_mask = {
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b10000001,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b11111111
            };
    8'h49: ascii_mask = {
            8'b10000001,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b10000001,
            8'b11111111
            };
    8'h4a: ascii_mask = {
            8'b11100001,
            8'b11110011,
            8'b11110011,
            8'b11110011,
            8'b00110011,
            8'b00110011,
            8'b10000111,
            8'b11111111
            };
    8'h4b: ascii_mask = {
            8'b00011001,
            8'b10011001,
            8'b10010011,
            8'b10000111,
            8'b10010011,
            8'b10011001,
            8'b00011001,
            8'b11111111
            };
    8'h4c: ascii_mask = {
            8'b00001111,
            8'b10011111,
            8'b10011111,
            8'b10011111,
            8'b10011101,
            8'b10011001,
            8'b00000001,
            8'b11111111
            };
    8'h4d: ascii_mask = {
            8'b00111001,
            8'b00010001,
            8'b00000001,
            8'b00000001,
            8'b00101001,
            8'b00111001,
            8'b00111001,
            8'b11111111
            };
    8'h4e: ascii_mask = {
            8'b00111001,
            8'b00011001,
            8'b00001001,
            8'b00100001,
            8'b00110001,
            8'b00111001,
            8'b00111001,
            8'b11111111
            };
    8'h4f: ascii_mask = {
            8'b11000111,
            8'b10010011,
            8'b00111001,
            8'b00111001,
            8'b00111001,
            8'b10010011,
            8'b11000111,
            8'b11111111
            };
    8'h50: ascii_mask = {
            8'b00000011,
            8'b10011001,
            8'b10011001,
            8'b10000011,
            8'b10011111,
            8'b10011111,
            8'b00001111,
            8'b11111111
            };
    8'h51: ascii_mask = {
            8'b11000111,
            8'b10010011,
            8'b00111001,
            8'b00111001,
            8'b00100101,
            8'b00110011,
            8'b10001001,
            8'b11111111
            };
    8'h52: ascii_mask = {
            8'b00000011,
            8'b10011001,
            8'b10011001,
            8'b10000011,
            8'b10010011,
            8'b10011001,
            8'b00011001,
            8'b11111111
            };
    8'h53: ascii_mask = {
            8'b11000011,
            8'b10011001,
            8'b10011111,
            8'b11000011,
            8'b11111001,
            8'b10011001,
            8'b11000011,
            8'b11111111
            };
    8'h54: ascii_mask = {
            8'b10000001,
            8'b10100101,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11000011,
            8'b11111111
            };
    8'h55: ascii_mask = {
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b11000011,
            8'b11111111
            };
    8'h56: ascii_mask = {
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b11000011,
            8'b11100111,
            8'b11111111
            };
    8'h57: ascii_mask = {
            8'b00111001,
            8'b00111001,
            8'b00111001,
            8'b00101001,
            8'b00000001,
            8'b00010001,
            8'b00111001,
            8'b11111111
            };
    8'h58: ascii_mask = {
            8'b00111001,
            8'b10010011,
            8'b11000111,
            8'b11000111,
            8'b10010011,
            8'b00111001,
            8'b00111001,
            8'b11111111
            };
    8'h59: ascii_mask = {
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b11000011,
            8'b11100111,
            8'b11100111,
            8'b11000011,
            8'b11111111
            };
    8'h5a: ascii_mask = {
            8'b00000001,
            8'b00111001,
            8'b01110011,
            8'b11100111,
            8'b11001101,
            8'b10011001,
            8'b00000001,
            8'b11111111
            };
    8'h5b: ascii_mask = {
            8'b11000011,
            8'b11001111,
            8'b11001111,
            8'b11001111,
            8'b11001111,
            8'b11001111,
            8'b11000011,
            8'b11111111
            };
    8'h5c: ascii_mask = {
            8'b00111111,
            8'b10011111,
            8'b11001111,
            8'b11100111,
            8'b11110011,
            8'b11111001,
            8'b11111101,
            8'b11111111
            };
    8'h5d: ascii_mask = {
            8'b11000011,
            8'b11110011,
            8'b11110011,
            8'b11110011,
            8'b11110011,
            8'b11110011,
            8'b11000011,
            8'b11111111
            };
    8'h5e: ascii_mask = {
            8'b11100111,
            8'b11000011,
            8'b10000001,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11111111
            };
    8'h5f: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b00000000
            };
    8'h60: ascii_mask = {
            8'b11001111,
            8'b11100111,
            8'b11110011,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111
            };
    8'h61: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b10000111,
            8'b11110011,
            8'b10000011,
            8'b00110011,
            8'b10001001,
            8'b11111111
            };
    8'h62: ascii_mask = {
            8'b00011111,
            8'b10011111,
            8'b10000011,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b00100011,
            8'b11111111
            };
    8'h63: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11000011,
            8'b10011001,
            8'b10011111,
            8'b10011001,
            8'b11000011,
            8'b11111111
            };
    8'h64: ascii_mask = {
            8'b11100011,
            8'b11110011,
            8'b10000011,
            8'b00110011,
            8'b00110011,
            8'b00110011,
            8'b10001001,
            8'b11111111
            };
    8'h65: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11000011,
            8'b10011001,
            8'b10000001,
            8'b10011111,
            8'b11000011,
            8'b11111111
            };
    8'h66: ascii_mask = {
            8'b11100011,
            8'b11001001,
            8'b11001111,
            8'b10000111,
            8'b11001111,
            8'b11001111,
            8'b10000111,
            8'b11111111
            };
    8'h67: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11000001,
            8'b10011001,
            8'b10011001,
            8'b11000001,
            8'b11111001,
            8'b10000011
            };
    8'h68: ascii_mask = {
            8'b00011111,
            8'b10011111,
            8'b10010011,
            8'b10001001,
            8'b10011001,
            8'b10011001,
            8'b00011001,
            8'b11111111
            };
    8'h69: ascii_mask = {
            8'b11100111,
            8'b11111111,
            8'b11000111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11000011,
            8'b11111111
            };
    8'h6a: ascii_mask = {
            8'b11111001,
            8'b11111111,
            8'b11110001,
            8'b11111001,
            8'b11111001,
            8'b10011001,
            8'b10011001,
            8'b11000011
            };
    8'h6b: ascii_mask = {
            8'b00011111,
            8'b10011111,
            8'b10011001,
            8'b10010011,
            8'b10000111,
            8'b10010011,
            8'b00011001,
            8'b11111111
            };
    8'h6c: ascii_mask = {
            8'b11000111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11000011,
            8'b11111111
            };
    8'h6d: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b10010011,
            8'b00000001,
            8'b00101001,
            8'b00101001,
            8'b00111001,
            8'b11111111
            };
    8'h6e: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b00100011,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b11111111
            };
    8'h6f: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11000011,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b11000011,
            8'b11111111
            };
    8'h70: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b00100011,
            8'b10011001,
            8'b10011001,
            8'b10000011,
            8'b10011111,
            8'b00001111
            };
    8'h71: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b10001001,
            8'b00110011,
            8'b00110011,
            8'b10000011,
            8'b11110011,
            8'b11100001
            };
    8'h72: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b00100011,
            8'b10001001,
            8'b10011111,
            8'b10011111,
            8'b00001111,
            8'b11111111
            };
    8'h73: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11000011,
            8'b10011111,
            8'b11000011,
            8'b11111001,
            8'b10000011,
            8'b11111111
            };
    8'h74: ascii_mask = {
            8'b11001111,
            8'b11001111,
            8'b10000011,
            8'b11001111,
            8'b11001111,
            8'b11001001,
            8'b11100011,
            8'b11111111
            };
    8'h75: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b11000001,
            8'b11111111
            };
    8'h76: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b11000011,
            8'b11100111,
            8'b11111111
            };
    8'h77: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b00111001,
            8'b00101001,
            8'b00101001,
            8'b00000001,
            8'b10010011,
            8'b11111111
            };
    8'h78: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b00111001,
            8'b10010011,
            8'b11000111,
            8'b10010011,
            8'b00111001,
            8'b11111111
            };
    8'h79: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b10011001,
            8'b10011001,
            8'b10011001,
            8'b11000001,
            8'b11111001,
            8'b10000011
            };
    8'h7a: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b10000001,
            8'b10110011,
            8'b11100111,
            8'b11001101,
            8'b10000001,
            8'b11111111
            };
    8'h7b: ascii_mask = {
            8'b11110001,
            8'b11100111,
            8'b11100111,
            8'b10001111,
            8'b11100111,
            8'b11100111,
            8'b11110001,
            8'b11111111
            };
    8'h7c: ascii_mask = {
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11100111,
            8'b11111111
            };
    8'h7d: ascii_mask = {
            8'b10001111,
            8'b11100111,
            8'b11100111,
            8'b11110001,
            8'b11100111,
            8'b11100111,
            8'b10001111,
            8'b11111111
            };
    8'h7e: ascii_mask = {
            8'b10001001,
            8'b00100011,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111
            };
    8'h7f: ascii_mask = {
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111,
            8'b11111111
            };
    endcase
  end
endmodule

/////////////////////////
// 7 SEG               //
/////////////////////////
module display(NUM, HEX);
  input[3:0] NUM;

  output[6:0] HEX;
  reg[6:0] HEX;

  always @(*)
  case (NUM)
    4'h0 : HEX = 7'b1000000;
    4'h1 : HEX = 7'b1111001;
    4'h2 : HEX = 7'b0100100;
    4'h3 : HEX = 7'b0110000;
    4'h4 : HEX = 7'b0011001;
    4'h5 : HEX = 7'b0010010;
    4'h6 : HEX = 7'b0000010;
    4'h7 : HEX = 7'b1111000;
    4'h8 : HEX = 7'b0000000;
    4'h9 : HEX = 7'b0010000;
    4'hA : HEX = 7'b0001000;
    4'hB : HEX = 7'b0000011;
    4'hC : HEX = 7'b0100111;
    4'hD : HEX = 7'b0100001;
    4'hE : HEX = 7'b0000110;
    4'hF : HEX = 7'b0001110;
  endcase
endmodule

////////////////////////////
// HDMI MODULE FROM CHRIS //
////////////////////////////
module hdmi(
    clock25mhz, resetn,
    x, y,
    r, g, b,

        //////////// HDMI-TX //////////
        HDMI_TX_CLK,
        HDMI_TX_D,
        HDMI_TX_DE,
        HDMI_TX_HS,
        HDMI_TX_INT,
        HDMI_TX_VS
);

parameter CYCLE_DELAY = 0;

parameter WIDTH = 160;
parameter HEIGHT = 144;
parameter XDIV = 3;
parameter YDIV = 3;
parameter XSTART = 80;
parameter YSTART = 24;
parameter XEND = XSTART + XDIV*WIDTH;
parameter YEND = YSTART + YDIV*HEIGHT;

parameter HSIZE = 640;
parameter VSIZE = 480;
parameter HTOTAL = 800;
parameter VTOTAL = 525;
parameter HSYNC = 96;
parameter VSYNC = 2;
parameter HSTART = 144;
parameter VSTART = 34;
parameter HEND = HSTART + HSIZE;
parameter VEND = VSTART + VSIZE;


input clock25mhz;
input resetn;
output reg [11:0] x;
output reg [11:0] y;
input [7:0] r;
input [7:0] g;
input [7:0] b;

output HDMI_TX_CLK = ~clock25mhz;
output [23:0] HDMI_TX_D = hdmi_data;
output HDMI_TX_DE = hdmi_de[1];
output HDMI_TX_HS = hdmi_hsync[1];
output HDMI_TX_VS = hdmi_vsync[1];
input HDMI_TX_INT;


reg [23:0] hdmi_data;
reg hdmi_de [2];
reg hdmi_hsync [2];
reg hdmi_vsync [2];

reg [11:0] hdmi_hprecount;
reg [11:0] hdmi_vprecount;
reg [11:0] hdmi_hcount;
reg [11:0] hdmi_vcount;
wire hdmi_hactive = hdmi_hcount >= HSTART && hdmi_hcount < HEND;
wire hdmi_vactive = hdmi_vcount >= VSTART && hdmi_vcount < VEND;
wire hdmi_active = hdmi_hactive && hdmi_vactive;
wire hdmi_hpresync = ~(hdmi_hcount < HSYNC);
wire hdmi_vpresync = ~(hdmi_vcount < VSYNC);

always @(posedge clock25mhz or negedge resetn) begin
    if (!resetn) begin
        hdmi_de[0] <= 0;
        hdmi_de[1] <= 0;
        hdmi_hsync[0] <= 0;
        hdmi_hsync[1] <= 0;
        hdmi_vsync[0] <= 0;
        hdmi_vsync[1] <= 0;
        hdmi_hcount <= 0;
        hdmi_vcount <= 0;
    end else begin
        hdmi_de[0] <= hdmi_active;
        hdmi_de[1] <= hdmi_de[0];
        hdmi_hsync[0] <= hdmi_hpresync;
        hdmi_hsync[1] <= hdmi_hsync[0];
        hdmi_vsync[0] <= hdmi_vpresync;
        hdmi_vsync[1] <= hdmi_vsync[0];

        if (hdmi_hcount + 1'b1 == HTOTAL) begin
            hdmi_hcount <= 0;

            if (hdmi_vcount + 1'b1 == VTOTAL) begin
                hdmi_vcount <= 0;
            end else begin
                hdmi_vcount <= hdmi_vcount + 1'b1;
            end
        end else begin
            hdmi_hcount <= hdmi_hcount + 1'b1;
        end
    end
end


wire xactive = hdmi_hcount >= HSTART+XSTART && hdmi_hcount < HSTART+XEND;
wire yactive = hdmi_vcount >= VSTART+YSTART && hdmi_vcount < VSTART+YEND;
wire xsetup = hdmi_hcount >= HSTART+XSTART-CYCLE_DELAY && hdmi_hcount < HSTART+XEND-CYCLE_DELAY;
wire ysetup = hdmi_vcount >= VSTART+YSTART && hdmi_vcount < VSTART+YEND;

reg [$clog2(XDIV)-1:0] xcount;
reg [$clog2(YDIV)-1:0] ycount;

always @(posedge clock25mhz or negedge resetn) begin
    if (!resetn) begin
        hdmi_data <= 0;
        xcount <= 0;
        x <= 0;
        ycount <= 0;
        y <= 0;
    end else begin
        if (xactive && yactive) begin
            hdmi_data <= {r, g, b};
        end else begin
            hdmi_data <= 0;
        end

        if (xsetup && ysetup) begin
            if (xcount + 1'b1 == XDIV) begin
                xcount <= 0;
                if (x + 1'b1 == WIDTH) begin
                    x <= 0;
                    if (ycount + 1'b1 == YDIV) begin
                        ycount <= 0;
                        if (y + 1'b1 == HEIGHT) begin
                            y <= 0;
                        end else begin
                            y <= y + 1'b1;
                        end
                    end else begin
                        ycount <= ycount + 1'b1;
                    end
                end else begin
                    x <= x + 1'b1;
                end
            end else begin
                xcount <= xcount + 1'b1;
            end
        end
    end
end

endmodule

